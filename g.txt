NUMBER IDN CHA STRING INT LONG SHORT FLOAT DOUBLE CHAR VOID STRUCT TYPEDEF CONTINUE BREAK RETURN ( ) [ ] { } - + -- ++ * / % = ; , && || ! < > <= >= == != IF ELSE FOR WHILE DO
S' -> S
S -> M1 RCDS STB PROCS

PROCS -> ST { CONTS } PROCS
PROCS ->  

CONTS -> CONTS BLOCK
CONTS -> CONTS SENT
CONTS ->  

BLOCK -> BRCH
BLOCK -> CIR

SENT -> VAR
SENT -> EVN ;
SENT -> CALL ;
SENT -> E' ;
SENT -> E ;

REL -> REL || M2 R
REL -> REL && M2 R
REL -> ! R
REL -> R

ID -> IDN
ID -> * IDN

V -> ID V'
V' -> [ E' ] V'
V' ->  

TYPE -> INT
TYPE -> LONG
TYPE -> SHORT
TYPE -> FLOAT
TYPE -> DOUBLE
TYPE -> CHAR
TYPE -> VOID

VAR -> TYPE M3 T' ;
M3 ->  
T' -> V T''
T'' -> , V T''
T'' ->  

RCDS -> RCDS RCD
RCDS ->  

STB -> STB ST ;
STB ->  
ST -> P' IDN M4 ( P )

CALL -> ID ( U )
M1 ->  

RCD -> STRUCT IDN M5 { VB } ;
RCD -> TYPEDEF STRUCT IDN M5 { VB } IDN ;
VB -> VB VAR
VB ->  
M5 ->  

E -> CONTINUE
E -> BREAK
E -> RETURN E'

EXP -> E' ;
E' -> E' - T
E' -> E' + T
E' -> E' --
E' -> E' ++
E' -> T
T -> T * F
T -> T / F
T -> T % F
T -> - F
T -> F
F -> ( E' )
F -> NUMBER
F -> ID
F -> X

X -> ID [ E' ]
X -> X [ E' ]

EVN -> X = RIGHT
EVN -> ID = RIGHT

RIGHT -> E'
RIGHT -> CALL
RIGHT -> CHA
RIGHT -> STRING

M4 ->  
P -> P''' P''
P ->  
P' -> TYPE *
P' -> TYPE
P'' -> , P''' P''
P'' ->  
P''' -> P' IDN

U -> E' U'
U ->  
U' -> , E' U'
U' ->  

RELOP -> <
RELOP -> >
RELOP -> <=
RELOP -> >=
RELOP -> ==
RELOP -> !=
R -> E' RELOP E'
R -> ( REL )
R -> E'

M2 ->  

BRCH -> IF ( REL ) M2 SENT CH
BRCH -> IF ( REL ) M2 { CONTS } CH
CH -> M6 ELSE M2 SENT
CH -> M6 ELSE M2 { CONTS }
CH ->  
M6 ->  

CIR -> FOR ( E1 ; M2 E2 ; M2 E3 N ) M2 C
CIR -> WHILE M2 ( REL ) M2 C
CIR -> DO M2 { CONTS } WHILE M2 ( REL ) ;
C -> ;
C -> SENT
C -> { CONTS }
E1 -> EVN
E1 ->  
E2 -> REL
E2 ->  
E3 -> EVN
E3 -> E'
E3 ->  
N ->  